customElements.define("todo-list",class extends HTMLElement{constructor(){super(),this.t=new WeakMap,this.i=this.querySelector('[ref="input"]'),this.o=this.querySelector('[ref="submit"]'),this.l=this.querySelector('[ref="list"]'),this.h=this.hasAttribute("use-local")}get u(){return this.l.children[this.l.children.length-1]}set m(t){if("string"==typeof t){const e=JSON.parse(localStorage.getItem("todos")||"[]");e.push(t),localStorage.setItem("todos",JSON.stringify(e))}else Array.isArray(t)&&localStorage.setItem("todos",JSON.stringify(t))}get m(){return JSON.parse(localStorage.getItem("todos")||"[]")}add(t,e=this.h){const s=document.createElement("li",{is:"todo-item"});s.setAttribute("title",t),this.l.insertAdjacentElement("beforeend",s),this.t.set(this.u,t),this.i.value="",e&&(this.m=t)}delete(t){if(this.t.has(t)&&(this.t.delete(t),t.remove(),this.h)){const e=this.m,s=e.indexOf(t.getAttribute("title"));e.splice(s,1),this.m=e}}handleEvent({type:t,target:e}){"click"===t&&e.closest('[ref="submit"]')&&""!==this.i.value&&this.add(this.i.value)}connectedCallback(){this.h&&this.m.forEach(t=>this.add(t,!1)),this.o.addEventListener("click",this)}disconnectedCallback(){this.o.removeEventListener("click",this)}}),customElements.define("todo-item",class extends HTMLLIElement{constructor(){if(super(),this.k=this.closest("todo-list"),!this.hasAttribute("title"))throw new Error("TodoItem must have a title attribute to be constructed")}static observedAttributes(){return["title"]}attributeChangedCallback(t,e,s){console.log({name:t,p:e,newValue:s}),"title"===t&&(this.innerHTML=`<span>${s}</span><button type="button">&times; Clear</button>`)}S(){this.k.delete(this)}handleEvent({type:t,target:e}){"click"===t&&e.closest('[type="button"]')&&this.S()}connectedCallback(){this.addEventListener("click",this)}disconnectedCallback(){this.removeEventListener("click",this)}},{extends:"li"});

