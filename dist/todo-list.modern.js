window.customElements.define("todo-list",class extends HTMLElement{constructor(){super(),this.t=new WeakMap,this.i=this.querySelector('[ref="input"]'),this.o=this.querySelector('[ref="submit"]'),this.l=this.querySelector('[ref="list"]'),this.h=this.hasAttribute("use-local")}get u(){return this.l.children[this.l.children.length-1]}set k(t){if("string"==typeof t){const s=JSON.parse(localStorage.getItem("todos")||"[]");s.push(t),localStorage.setItem("todos",JSON.stringify(s))}else Array.isArray(t)&&localStorage.setItem("todos",JSON.stringify(t))}get k(){return JSON.parse(localStorage.getItem("todos")||"[]")}add(t,s=this.h){const e=document.createElement("li",{is:"todo-item"});e.setAttribute("title",t),this.l.insertAdjacentElement("beforeend",e),this.t.set(this.u,t),this.i.value="",s&&(this.k=t)}delete(t){if(this.t.has(t)&&(this.t.delete(t),t.remove(),this.h)){const s=this.k,e=s.indexOf(t.getAttribute("title"));s.splice(e,1),this.k=s}}handleEvent({type:t,target:s}){"click"===t&&s.closest('[ref="submit"]')&&""!==this.i.value&&this.add(this.i.value)}connectedCallback(){this.h&&this.k.forEach(t=>this.add(t,!1)),this.o.addEventListener("click",this)}disconnectedCallback(){this.o.removeEventListener("click",this)}}),window.customElements.define("todo-item",class extends HTMLElement{constructor(){if(super(),this.m=this.closest("todo-list"),!this.hasAttribute("title"))throw new Error("TodoItem must have a title attribute to be constructed")}static observedAttributes(){return["title"]}attributeChangedCallback(t,s,e){"title"===t&&(this.innerHTML=`<span>${e}</span><button type="button">&times; Clear</button>`)}p(){this.m.delete(this)}handleEvent({type:t,target:s}){"click"===t&&s.closest('[type="button"]')&&this.p()}connectedCallback(){this.addEventListener("click",this)}disconnectedCallback(){this.removeEventListener("click",this)}},{extends:"li"});
//# sourceMappingURL=todo-list.modern.js.map
