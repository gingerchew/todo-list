window.customElements.define("todo-list",class extends HTMLElement{constructor(){super(),this.t=new WeakMap,this.i=this.querySelector('[ref="input"]'),this.o=this.querySelector('[ref="submit"]'),this.l=this.querySelector('[ref="list"]'),this.h=this.hasAttribute("use-local")}get u(){return this.l.children[this.l.children.length-1]}set m(t){if("string"==typeof t){const s=JSON.parse(localStorage.getItem("todos")||"[]");s.push(t),localStorage.setItem("todos",JSON.stringify(s))}else Array.isArray(t)&&localStorage.setItem("todos",JSON.stringify(t))}get m(){return JSON.parse(localStorage.getItem("todos")||"[]")}add(t,s=this.h){this.l.insertAdjacentHTML("beforeend",`<todo-item title="${t}"></todo-item>`),this.t.set(this.u,t),this.i.value="",s&&(this.m=t)}delete(t){if(this.t.has(t)&&(this.t.delete(t),t.remove(),this.h)){const s=this.m,e=s.indexOf(t.getAttribute("title"));s.splice(e,1),this.m=s}}handleEvent({type:t,target:s}){"click"===t&&s.closest('[ref="submit"]')&&""!==this.i.value&&this.add(this.i.value)}connectedCallback(){this.h&&this.m.forEach(t=>this.add(t,!1)),this.o.addEventListener("click",this)}disconnectedCallback(){this.o.removeEventListener("click",this)}}),window.customElements.define("todo-item",class extends HTMLElement{constructor(){super(),this.k=this.closest("todo-list"),this.hasAttribute("title")||console.error("<todo-item> must have a title attribute to be constructed"),this.setAttribute("role","listitem")}static observedAttributes(){return["title"]}render(t){this.innerHTML=`<span>${t}</span><button type="button">&times; Clear</button>`}attributeChangedCallback(t,s,e){"title"===t&&this.render(e)}p(){this.k.delete(this)}handleEvent({type:t,target:s}){"click"===t&&s.closest('[type="button"]')&&this.p()}connectedCallback(){this.addEventListener("click",this),this.render(this.getAttribute("title"))}disconnectedCallback(){this.removeEventListener("click",this)}});
//# sourceMappingURL=todo-list.modern.js.map
